// Phase 1

esi = $0x402400;         // 字符串地址
strings_not_equal();
if (eax == 0) {
    release_sp();
} else {
    explode_bomb();
}


// Phase 2

rsp = rsp -0x28;            // 一个栈帧大小为 0x28
rsi = rsp;

read_six_numbers();  

if (*rsp != 1) {
    explode_bomb();
}

rbx = rsp + 4;          // 栈顶第2个元素地址
rbp = rsp + 0x18;       // 栈顶第6个元素地址

do {
    eax = *(rbx - 4);   // rbx 前一个元素
    if (*rbx != eax * 2) {      
        explode_bomb();
    } 
    rbx += 4;           // rbx 指向下一个元素
} while (rbx <= rbp);   // rbx 为栈顶第7个元素地址 (实际不存在)

...释放栈帧
rsp += 0x28;


// Phase 3

rsp = rsp - 0x18
    // 调用函数前参数设置   （output为rdi   num_1）
rcx = rsp + 0xc     // num_4
rdx = rsp + 8       // num_3
esi = $0x4025cf     // num_2

eax = 0             // 获取函数返回值
__isoc99_sscanf@plt()

if eax <= 1 {   //  有符号比较
    explode_bomb()
}

if *(rsp + 8) - 7 > 0 {    //  无符号比较
    explode_bomb()
}

eax = *(rsp + 8)
jmp 0x402470 + 8 *eax

switch(x) {
    case 0x400f7c:
        eax = 0xcf;
        break;
    case 0x400f83:
        eax = 0x2c3;
        break;
    case 0x400f8a:
        eax = 0x100;
        break;
    case 0x400f91:
        eax = 0x185;
        break;
    case 0x400f98:
        eax = 0xce;
        break;
    case 0x400f9f:
        eax = 0x2aa;
        break;
    case 0x400fa6:
        eax = 0x147;
        break;
    case 0x400fad:
        call explode_bomb();
        break;
    case 0x400fb2:
        eax = 0x0;
        break;
    case 0x400fb9:
        eax = 0x137;
}


if eax != *(rsp + 0xc){
    explode_bomb()
}

ret





// Phase 4

void phase_4() {
    // 减小栈指针，准备局部变量空间
    rsp -= 18;

    // 函数参数设置
    int* num_4 = (int*)(rsp + 0xc); // num_4 (y)
    int* num_3 = (int*)(rsp + 8);   // num_3 (x)

    // 读取用户输入
    esi = 0x4025cf;  // 指向输入格式字符串
    eax = 0;
    int result = __isoc99_sscanf(esi, "%d %d", num_4, num_3);

    // 判断输入是否合法
    if (result != 2) {
        explode_bomb();
    }

    // 判断 num_3 是否超出范围
    if (*num_3 > 0xe) {
        explode_bomb();
    }

    // 设置参数，准备调用 func_4
    int num_2 = 0;        // num_2
    int num_1 = *num_3;   // num_1
    int max_value = 0xe;  // 最大值 (edx)

    // 调用 func_4
    eax = func_4(num_1, num_2, max_value);

    // 判断 func_4 的返回值是否合法
    if (eax <= 0) {
        explode_bomb();
    } else {
        // 判断 num_4 是否为0
        if (*num_4 != 0) {
            explode_bomb();
        }
    }

    // 恢复栈指针并返回
    rsp += 24;
    return;
}

int func_4(int num_1, int num_2, int max_value) {
    // 减小栈指针，准备局部变量空间
    rsp -= 8;

    // 计算中间值
    int mid = (max_value - num_2) / 2 + num_2;

    // 递归处理
    if (mid > num_1) {
        max_value = mid - 1;
        eax = func_4(num_1, num_2, max_value);
        eax *= 2;
    } else if (mid < num_1) {
        num_2 = mid + 1;
        eax = func_4(num_1, num_2, max_value);
        eax = eax * 2 + 1;
    } else {
        eax = 0;
    }

    // 恢复栈指针并返回
    rsp += 8;
    return eax;
}

// phase_5

int string_length(string * str){
    if(str == 0){
        return 0;
    }
    string * str_offset_addr = str

    do{
        str_offset_addr += 1
        str_len = str_offset_addr - str
    }
    while(*str_offset_addr != 0);

    return str_len;
}


 void return_(){
    eax = edx        
    pop rbx
    pop rbp
    pop r12
    ret
};

int strings_not_equal(){
    push r12
    push rbp
    push rbx
    rbx = rdi
    rbp = rsi
    string_length()
    r12 = eax
    rdi = rbp
    string_length()
    edx = 1

    if(r12 != eax){
        return_();
    }

    eax = *rbx

    if(al == 0){
        edx = 0
        return_();
    }


    if(al == *rbp){ 
        while(true){
            rbx += 1
            rbp += 1
            eax = *(rbx)
            
            if(al == 0){
                edx = 0
                return_();
            }

            if(al != *rbp){
                edx = 1
                return_();
            }
        }
    }else{
        edx = 1
        return_();
    }

}

void phase_5(){

    push rbx
    rsp -= 0x20
    rbx = rdi 
    rax = *(fs + 0x28)
    rax = *(rsp + 0x18) 
    int check = string_length();
    if(check != 6){
        explode_bomb()
    }

    eax = 0
    do{
        ecx = *(rbx + rax)
        *(rsp) = cl
        rdx = *(rsp)

        edx = edx & 0xf
        edx = *(rdx + 0x4024b0)

        *(rsp + rax + 16) = dl
        rax += 1 
    }while(rax != 6)

    *(rsp + 0x16) = 0
    esi = 0x40245e
    rdi = rsp + 16
    int check_ = strings_not_equal()
    if(check_ != 0){
        explode_bomb()
    }
    rax = *(rsp + 0x18)

    rax ^= *(fs + 0x28)
    if(rax != 0){
        __stack_chk_fail@plt()      // 检测金丝雀值
    }     

    rsp += 0x20
    pop rbx
    ret
}

void phase_6(){
    rsp = 0x50
    r13 = rsp
    rsi = rsp
    read_six_numbers()
    r14 = rsp
    r12d = 0

    do{
        rbp = r13
        eax = *r13 - 1
           // 读入的六个数不能大于6  
        if(rax > 5){
            explode_bomb()
        }
        r12d += 1

        if(r12d == 6){
            rsi = rsp + 24
            rax = r14
            ecx = 7
            // 调整数组元素
            // 第1个循环
            do{
                edx = ecx - *rax
                *rax = edx
                rax += 4        
            }while(rax != rsi);
            // rax = rsi
            // edx = 7 - array[5]
            
            esi = 0
            for(rsi = 0;rsi != 0x18;rsi += 4){
                ecx = *(rsp + rsi);

                if(ecx > 1){
                    edx = 0x6032d0
                    for(eax = 1;eax != ecx;eax += 1){
                        rdx = *(rdx + 8)
                    }
                }else{
                    //  只进行第一次
                    edx = 0x6032d0;
                    *(rsp + rsi *2 + 32) = *rdx;
                }

            }

            rbx = *(rsp + 32)
            rcx = rbx
            for(rax = rsp + 0x28;rax != rsp + 0x50;rax += 8){
                rdx = *(rax)
                *(rcx + 8) = rdx
                rcx = rdx
            }

            *(rdx + 8) = 0
            for(ebp = 5;ebp < 0;ebp -= 1){
                rax = *(rbx + 8)
                eax = *rax                
                if(*rbx < eax){
                    explode_bomb() 
                }
                rbx = *(rbx + 8)
            }

            rsp += 0x50
            ret

        }

        ebx = r12d

           // 读入的六个数中，除第一个值，另外5个值不能和第一相同    

        for(ebx = )    
        do{
            rax = ebx
 
            eax = *(rsp + rax * 4)
            if(*rbp == eax){
                explode_bomb()
            }
            ebx += 1
        }while(ebx <= 5)

        r13 += 4
    }while(true)
}


void phase_6(){
    r13 = rsp
    rsi = rsp
    read_six_numbers()
    r14 = rsp
    r12 = 0         # i = 0
# num_1 外层循环
-------------------------------------------------   
    rbp = r13   (rsp 副本)
    eax =  *rsp - 1

    if(eax <= 5){
        explode_bomb()
    }

    r12 += 1        # i += 1
                    # 退出整个循环(i == 6)
    if(r12 == 6){   
        break;
    }

    ebx = r12   # j = r12

    # 内层循环
    -------------------------------------------------   
    rax = ebx
    eax = *(rsp + rax + 4)

    if(rbp == eax){
        explode_bomb()
    }

    ebx += 1    # j += 1
                # 退出内层循环(j > 5)
    if(ebx > 5){
        break;
    }
    -------------------------------------------------   
    r13 += 4

-------------------------------------------------   


    rsi = rsp + 0x18
    rax = r14   # addr = rsp
    ecx = 7
# num_2 循环
-------------------------------------------------------------
    edx = ecx
    edx -= *rax 
    *rax = edx
    rax += 4    # addr += 4
    if(addr == rsp + 0x18){
        break;
    }
-------------------------------------------------------------

    
    for(rsi = 0;rsi != 0x18;rsi += 4){
        ecx = *(rsp + rsi +1)
        
        if(ecx > 1){
            break;
        }
        edx = 0x6032d0
        *(rsp + rsi*2 + 0x20) = rdx

        eax = 1
        edx = 0x6032d0 
        for(eax = 1;eax == ecx;eax += 1){
            rdx = rdx + 8
        }      

    }





    while(rsi != 0x18){     
        *(rsp + rsi*2 + 0x20) = rdx
        rsi += 4
        ecx = *(rsp + rsi +1)
        if(ecx > 1){
            break;
        }
        edx = 0x6032d0
   
    }


}